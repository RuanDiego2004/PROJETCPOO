
### üîë Arquitetura e Camadas do Sistema

O sistema que criamos pode ser descrito usando uma **arquitetura em camadas**, que segue o princ√≠pio de **separa√ß√£o de responsabilidades**. Vamos dividir as camadas principais do c√≥digo:

1. **Camada de Apresenta√ß√£o (UI)**: Onde o usu√°rio interage com o sistema.
2. **Camada de Servi√ßo**: Onde a l√≥gica de neg√≥cios √© implementada.
3. **Camada de Persist√™ncia (Reposit√≥rios)**: Onde os dados s√£o armazenados e recuperados.
4. **Modelos (Entidades)**: As classes que representam as entidades do sistema (usu√°rios, motoristas, viagens).

---

### 1Ô∏è‚É£ Camada de Apresenta√ß√£o (UI)

Esta camada √© respons√°vel pela **intera√ß√£o com o usu√°rio**. Ela recebe a entrada do usu√°rio (por meio de um terminal, por exemplo) e exibe as informa√ß√µes ou resultados solicitados.

**Classe**: `UsuarioController`

- **Responsabilidade**: √â a interface entre o usu√°rio e o sistema. Ele exibe os menus e op√ß√µes de intera√ß√£o e chama os servi√ßos necess√°rios para realizar as opera√ß√µes.

**Fun√ß√µes principais**:
- Exibe o menu de op√ß√µes para o usu√°rio.
- L√™ a entrada do usu√°rio e chama os m√©todos apropriados dos servi√ßos.
- Gerencia a entrada de dados, como a solicita√ß√£o de viagens, in√≠cio de viagens e conclus√£o de viagens.

**Exemplo de Intera√ß√£o**:
- O usu√°rio pode escolher adicionar um usu√°rio, solicitar uma viagem, ou ver o status de viagens existentes.
- Essa camada **n√£o** cont√©m l√≥gica de neg√≥cios nem de persist√™ncia; ela s√≥ interage com o usu√°rio e chama os m√©todos apropriados dos servi√ßos.

---

### 2Ô∏è‚É£ Camada de Servi√ßo

A camada de servi√ßo cont√©m a **l√≥gica de neg√≥cios** do sistema. Ela faz a **coordena√ß√£o** entre os modelos e os reposit√≥rios para processar as a√ß√µes solicitadas pela camada de apresenta√ß√£o.

**Classes**:
- `UsuarioService`
- `MotoristaService`
- `ViagemService`

**Responsabilidade**:
- Implementar a l√≥gica que manipula as viagens, motoristas e usu√°rios. Por exemplo, um motorista pode ser designado a uma viagem, a viagem pode ser iniciada, conclu√≠da ou o status da viagem pode ser alterado.
- Cada servi√ßo pode interagir com os reposit√≥rios para salvar e recuperar informa√ß√µes de usu√°rios, motoristas e viagens.

**Fun√ß√µes principais**:
- **UsuarioService**: Gerencia as opera√ß√µes de cria√ß√£o de usu√°rios e consulta de usu√°rios.
- **MotoristaService**: Gerencia a disponibilidade dos motoristas, ou seja, se est√£o dispon√≠veis para aceitar uma nova viagem ou se est√£o ocupados com uma viagem.
- **ViagemService**: Lida com as opera√ß√µes de **solicitar viagem**, **iniciar viagem** e **concluir viagem**. Ele tamb√©m calcula a tarifa de cada viagem e altera o status da viagem.

---

### 3Ô∏è‚É£ Camada de Persist√™ncia (Reposit√≥rios)

A camada de persist√™ncia √© respons√°vel por **salvar e recuperar dados**. Aqui utilizamos **serializa√ß√£o em arquivos**, mas em sistemas reais, seria poss√≠vel substituir por um banco de dados (relacional ou n√£o relacional).

**Classes**:
- `UsuarioRepository`
- `MotoristaRepository`
- `ViagemRepository`

**Responsabilidade**:
- **UsuarioRepository**: Gerencia a leitura e escrita de dados dos usu√°rios.
- **MotoristaRepository**: Gerencia a leitura e escrita dos motoristas dispon√≠veis.
- **ViagemRepository**: Gerencia as viagens, salvando novas viagens ou atualizando as existentes.

Esses reposit√≥rios s√£o respons√°veis por interagir com o **arquivo serializado** (por exemplo, `motoristas.dat`, `viagens.dat`, etc.) ou uma base de dados para armazenar as entidades de forma persistente. Eles permitem que o sistema armazene informa√ß√µes mesmo ap√≥s o fechamento do programa.

---

### 4Ô∏è‚É£ Modelos (Entidades)

Esta camada cont√©m as **entidades do sistema**, que representam as **informa√ß√µes que o sistema manipula**.

**Classes**:
- `Usuario`
- `Motorista`
- `Viagem`

**Responsabilidade**:
- **Usuario**: Representa um usu√°rio do sistema, que pode solicitar viagens.
- **Motorista**: Representa um motorista dispon√≠vel para realizar viagens. O motorista tem um status de disponibilidade (se est√° dispon√≠vel ou n√£o).
- **Viagem**: Representa uma viagem solicitada por um usu√°rio. A viagem tem um status (pendente, em progresso ou conclu√≠da) e um motorista designado.

Essas classes **n√£o possuem l√≥gica de neg√≥cios** complexa, mas sim apenas os atributos que representam o estado de cada entidade.

---

### üìë Fluxo de Intera√ß√£o

Aqui est√° o fluxo de como o c√≥digo interage entre as camadas:

1. **Usu√°rio solicita uma viagem**:
   - O **controlador (`UsuarioController`)** chama o m√©todo `solicitarViagem()` do **servi√ßo de viagem (`ViagemService`)**.
   - O **servi√ßo de viagem** busca motoristas dispon√≠veis no **reposit√≥rio de motoristas (`MotoristaRepository`)**.
   - Se encontrar um motorista dispon√≠vel, a **viagem** √© criada e salva no **reposit√≥rio de viagens (`ViagemRepository`)**.

2. **Motorista √© designado para a viagem**:
   - O motorista √© marcado como **indispon√≠vel** no **reposit√≥rio de motoristas**.
   - A viagem tem um **status "pendente"** e aguarda para ser iniciada.

3. **Iniciar viagem**:
   - O **controlador** chama `iniciarViagem()` no **servi√ßo de viagem**, que altera o **status da viagem** para "em progresso".
   - O **motorista** est√° a caminho do destino, e o status da viagem √© atualizado.

4. **Concluir viagem**:
   - O **controlador** chama `concluirViagem()` no **servi√ßo de viagem**, que altera o **status da viagem** para "conclu√≠da".
   - O **motorista** √© novamente marcado como **dispon√≠vel** para novas viagens.
   - O **reposit√≥rio de motoristas** √© atualizado para refletir que o motorista est√° dispon√≠vel para uma nova viagem.

---

### üì¶ Resumo das Camadas

- **Camada de Apresenta√ß√£o**: Interage com o usu√°rio, exibe informa√ß√µes e recebe entradas. Chama os servi√ßos para executar opera√ß√µes.
- **Camada de Servi√ßo**: Cont√©m a l√≥gica de neg√≥cios (ex: como solicitar uma viagem, atribuir motoristas e alterar o status das viagens).
- **Camada de Persist√™ncia (Reposit√≥rios)**: Respons√°vel pela leitura e escrita de dados no armazenamento persistente (neste caso, arquivos).
- **Modelos (Entidades)**: Representam as entidades no sistema (usu√°rios, motoristas, viagens) e armazenam os dados associados a cada uma delas.

---

### üë• Rela√ß√µes entre as Camadas:

1. **UI ‚Üí Servi√ßo**: O controlador (UI) solicita a√ß√µes do servi√ßo (ex: solicitar viagem, iniciar viagem).
2. **Servi√ßo ‚Üí Reposit√≥rio**: O servi√ßo interage com os reposit√≥rios para salvar e recuperar dados (ex: viagens, motoristas).
3. **Servi√ßo ‚Üí Modelos**: O servi√ßo manipula as entidades (modelos), como criar uma nova viagem ou atualizar o status da viagem.

---

### üí° Conclus√£o

Agora, o sistema simula um servi√ßo de transporte similar ao **Uber**, onde:

- **Motoristas** podem ser designados a viagens.
- **Usu√°rios** podem solicitar viagens.
- O **status das viagens** √© atualizado conforme as intera√ß√µes.
- **Persist√™ncia** de dados usando **serializa√ß√£o** (no caso de motoristas e viagens).

Se precisar de mais detalhes sobre alguma parte ou quiser adicionar mais funcionalidades, √© s√≥ avisar! üòÑ
